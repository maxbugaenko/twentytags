<?xml version="1.0" ?>
<!--
 *
 * Copyright (c) FaZend.com
 * All rights reserved.
 *
 * You can use this product "as is" without any warranties from authors.
 * You can change the product only through Google Code repository
 * at http://code.google.com/p/fazend
 * If you have any questions about privacy, please email privacy@fazend.com
 *
 * @copyright Copyright (c) FaZend.com
 * @version $Id: build.xml 2271 2010-12-30 13:22:57Z yegor256@gmail.com $
 * @category FaZend
 *
 * This Phing build file. For more information see this document:
 * http://phing.info/docs/guide/current/
 *
-->

<project basedir="." default="main">

    <!-- Sets the DSTAMP, TSTAMP and TODAY properties -->
    <tstamp/>

    <!-- all php scripts should be able to include files from these dirs -->
    <includepath classpath="${project.basedir}/src/library" />
    <includepath classpath="${project.basedir}/test" />

    <!-- this is where CC home is located -->
    <property name="cc.root" value="/home/cc" />

    <!-- main task, executed by the project -->
    <target name="main"
        depends="svn, lint, phpcs, phpmd, test, deploy, phprack, clean"
        description="Validate, compile, deploy and clean">
    </target>

    <!-- get revision number -->
    <svnlastrevision
        workingcopy="${project.basedir}"
        propertyname="svn.revision"/>
    <echo msg="SVN revision: ${svn.revision}" />

    <target name="svn" description="Get all necessary information about current build" >
        <!--
            {to.deploy} asks the builder to deploy everything created to the
            target directories in the CruiseControl environment.
        -->
        <if>
            <not><isset property="to.deploy" /></not>
        <then>
            <if><available file="${cc.root}" type="dir" /><then>
                <!-- this property is used later in order to turn deployment ON -->
                <property name="to.deploy" value="true" />
                <!-- ftp uploader -->
                <taskdef name="uploadByFTP" classname="src.library.FaZend.Application.Phing.UploadByFTP" />
            </then><else>
                <property name="to.deploy" value="false" />
                <echo msg="{to.deploy} set to FALSE since it's not a CruiseControl environment" />
            </else></if>
        </then></if>

        <!--
            {to.lint} property explicitly asks the builder to validate
            PHP syntax in all PHP/PHTML/HTML files and stops the process
            if any problems are found
        -->
        <if>
            <not><isset property="to.lint" /></not>
        <then>
            <property name="to.lint" value="${to.deploy}" />
        </then></if>

        <!--
            {to.clean} property asks the builder to clean everything
            created during building, all reports, temp files, documentation
            and other information, which is present on the disc
        -->
        <if>
            <not><isset property="to.clean" /></not>
        <then>
            <property name="to.clean" value="${to.deploy}" />
        </then></if>

        <!--
            {to.coverage} property asks the builder to setup PHP coverage
            database before running of PHPUnit tests and to create
            coverage report when all tests are finished. xdebug PHP extension
            should be loaded in order to use this feature.
        -->
        <if>
            <not><isset property="to.coverage" /></not>
        <then>
            <if><isset property="to.unit" /><then>
                <property name="to.coverage" value="false" />
            </then><else>
                <property name="to.coverage" value="${to.deploy}" />
            </else></if>
        </then></if>

        <!--
            {to.phpcs} asks the builder to validate PHP/PHTML syntax with PHPCS
            PEAR package and stops building if any errors are found (warnings
            are ignored). PHPCS package is mandatory to use this task.
        -->
        <if>
            <not><isset property="to.phpcs" /></not>
        <then>
            <property name="to.phpcs" value="false" />
        </then></if>

        <!--
            {to.phpmd} property explicitly asks the builder to validate
            PHP code quality with PHP Mess Detector
        -->
        <if>
            <not><isset property="to.phpmd" /></not>
        <then>
            <property name="to.phpmd" value="false" />
        </then></if>

        <!--
            {to.unit} may define a mask for the test to run, all other validations
            and reports will be disabled.
        -->
        <if>
            <isset property="to.unit" />
        <then>
            <property name="to.deploy" value="false" override="true" />
            <property name="to.phpcs" value="false" override="true" />
            <property name="to.coverage" value="false" override="true" />
            <property name="to.phpmd" value="false" override="true" />
        </then></if>

        <echo msg="{to.deploy} set to ${to.deploy}" />
        <echo msg="{to.lint} set to ${to.lint}" />
        <echo msg="{to.clean} set to ${to.clean}" />
        <echo msg="{to.coverage} set to ${to.coverage}" />
        <echo msg="{to.phpcs} set to ${to.phpcs}" />
        <echo msg="{to.phpmd} set to ${to.phpmd}" />
    </target>

    <target name="lint" description="Run syntax check for all classes" >
        <if><istrue value="${to.lint}" />
        <then>
            <phplint haltonfailure="yes" level="verbose">
                <fileset dir="${project.basedir}/src/application">
                    <include name="**/*.php"/>
                    <include name="**/*.phtml"/>
                    <exclude name=".svn/**"/>
                </fileset>
            </phplint>
        </then><else>
            <echo msg="Skipped in '${phing.project.name}', since {to.lint} is FALSE" />
        </else></if>
    </target>

    <target name="test" description="Run all existing unit-tests" >
        <!-- prepare code coverage db -->
        <if><istrue value="${to.coverage}" /><then>
            <property name="coverage.db" value="${coverage.dir}/coverage.xml" />

            <!-- make sure it exists -->
            <mkdir dir="${coverage.dir}" />

            <!-- create coverage database that will collect all reports -->
            <coverage-setup database="${coverage.db}">
                <fileset dir="${project.basedir}/src/application">
                    <include name="**/*.php"/>
                    <exclude name=".svn/**"/>
                </fileset>
            </coverage-setup>
        </then></if>

        <!-- one individual test, specified in -Dto.unit=... -->
        <if><isset property="to.unit" /><then>
            <phpunit haltonerror="yes" haltonfailure="yes">
                <formatter type="plain" usefile="no" />
                <batchtest>
                    <fileset dir="${project.basedir}">
                        <include name="${to.unit}"/>
                        <include name="test/${to.unit}"/>
                    </fileset>
                    <fileset dir="${project.basedir}/test">
                        <include name="closers/*.php"/>
                        <exclude name="**/Abstract*.php"/>
                        <exclude name="**/_*.php"/>
                        <exclude name=".svn/**"/>
                    </fileset>
                </batchtest>
            </phpunit>
        </then><else>
            <mkdir dir="${project.basedir}/reports/tests" />
            <phpunit haltonerror="yes" haltonfailure="yes" codecoverage="${to.coverage}"
                haltonincomplete="false" haltonskipped="false">
                <formatter type="xml" usefile="true" todir="${project.basedir}/reports/tests" />
                <formatter type="plain" usefile="no" />
                <batchtest>
                    <fileset dir="${project.basedir}/test">
                        <include name="**/*Test.php"/>
                        <exclude name="**/Abstract*.php"/>
                        <exclude name="**/_*.php"/>
                        <exclude name=".svn/**"/>
                    </fileset>
                    <fileset dir="${project.basedir}/test">
                        <include name="closers/*.php"/>
                        <exclude name="**/Abstract*.php"/>
                        <exclude name="**/_*.php"/>
                        <exclude name=".svn/**"/>
                    </fileset>
                </batchtest>
            </phpunit>
        </else></if>
    </target>

    <target name="phpcs" description="Validate the quality of PHP code with PHPCS utility">
        <if><istrue value="${to.phpcs}" /><then>
            <!-- see: http://pear.php.net/package/PHP_CodeSniffer/download -->
            <exec command="phpcs
                -n
                --report=full
                --standard=Zend
                --ignore='.svn/*'
                --extensions='php'
                ${project.basedir}/src/application"
                escape="false"
                checkreturn="true"
                passthru="true" />
        </then><else>
            <echo msg="Skipped in '${phing.project.name}', since {to.phpcs} is FALSE" />
        </else></if>
    </target>

    <target name="phpmd" description="PHP Mess Detection">
        <if><istrue value="${to.phpmd}" /><then>
            <exec command="phpmd
                ${project.basedir}/src/application
                text
                codesize,unusedcode
                --extensions='php,phtml'
				"
                escape="false"
                checkreturn="false"
                passthru="true" />
        </then><else>
            <echo msg="Skipped in '${phing.project.name}', since {to.phpmd} is FALSE" />
        </else></if>
    </target>

    <target name="deploy" description="Upload source files to the production FTP">
        <if><istrue value="${to.deploy}" /><then>
            <echo msg="${svn.revision}" file="${project.basedir}/src/application/deploy/subversion/revision.txt" />

            <!-- set flag.txt for the application, to notify it that the DB should be resynchronized -->
            <echo msg="${svn.revision}" file="${project.basedir}/src/application/deploy/flag.txt" />

            <echo msg="Uploading revision: ${svn.revision}" />
            <!-- the Task is defined as PHP class, see phings/UploadByFTP.php -->

            <php expression="set_error_handler(create_function('', 'return true;'));"/>
            <mkdir dir="${project.basedir}/build/ftp-upload"/>
            <copy todir="${project.basedir}/build/ftp-upload" preservelastmodified="true">
    		    <filterchain>
                    <expandproperties />
                </filterchain>
    			<fileset dir="${project.basedir}/${ftp.srcdir}">
    				<include name="**/*.ini" />
    			</fileset>
            </copy>
            <copy todir="${project.basedir}/build/ftp-upload" preservelastmodified="true">
    		    <filterchain>
                    <stripwhitespace />
                </filterchain>
    			<fileset dir="${project.basedir}/${ftp.srcdir}">
    				<include name="**/*.php" />
    			</fileset>
            </copy>
            <copy todir="${project.basedir}/build/ftp-upload" preservelastmodified="true">
    			<fileset dir="${project.basedir}/${ftp.srcdir}">
    				<include name="**" />
    				<exclude name=".svn/**" />
    				<exclude name="**/*.php" />
    				<exclude name="**/*.ini" />
    			</fileset>
            </copy>
            <uploadByFTP server="${ftp.server}"
                username="${ftp.user}"
                password="${ftp.password}"
                srcdir="${project.basedir}/build/ftp-upload"
                destdir="${ftp.destdir}">
            </uploadByFTP>
        </then><else>
            <echo msg="Skipped in '${phing.project.name}', since {to.deploy} is FALSE" />
        </else></if>
    </target>

    <target name="phprack" description="Ping phpRack URL in order to run integration tests">
        <if><and>
            <istrue value="${to.deploy}" />
            <isset property="phprack.url" />
        </and><then>
            <http-request
                url="${phprack.url}"
                responseRegex="/PHPRACK SUITE: OK/"
                observerEvents="connect,receivedBody,disconnect"
                verbose="true"
            />
        </then><else>
            <echo msg="Skipped in '${phing.project.name}', since it's not a continuous integration environment" />
        </else></if>
    </target>

    <target name="clean" description="Remove obsolete files just created" >
        <if><istrue value="${to.clean}" /><then>
            <delete verbose="false" includeemptydirs="true" failonerror="false">
                <fileset dir="${project.basedir}/reports">
                    <include name="*" />
                </fileset>
                <fileset dir="${project.basedir}/build">
                    <include name="*" />
                </fileset>
            </delete>
        </then><else>
            <echo msg="Skipped in '${phing.project.name}', since {to.clean} is set to FALSE" />
        </else></if>
    </target>

</project>
